/// <filename>
///     Contract.cs
/// </filename>

// <auto-generated/>
 namespace Chronos.Hashflare
{
  public class Contract : ZES.Infrastructure.Domain.EventSourced, ZES.Interfaces.Domain.IAggregate
  {
    public Contract() 
    {
      Register<Chronos.Hashflare.Events.ContractCreated>(ApplyEvent); 
      Register<Chronos.Hashflare.Events.ContractExpired>(ApplyEvent); 
      Register<Chronos.Hashflare.Events.CoinMinedByContract>(ApplyEvent);
    }  
    public Contract(string contractId, string type, int quantity, double total) : this() 
    {
      When(new Chronos.Hashflare.Events.ContractCreated(contractId, type, quantity, total));
    }  
    public void Expire ()
    {
      When(new Chronos.Hashflare.Events.ContractExpired());
    }  
    public void AddAmountMined (string type, double quantity)
    {
      When(new Chronos.Hashflare.Events.CoinMinedByContract(type, quantity));
    }  
    private void ApplyEvent (Chronos.Hashflare.Events.ContractCreated e)
    {
      Id = e.ContractId;
    }  
    private void ApplyEvent (Chronos.Hashflare.Events.ContractExpired e)
    {
    }  
    private void ApplyEvent (Chronos.Hashflare.Events.CoinMinedByContract e)
    {
    }
  }
}

