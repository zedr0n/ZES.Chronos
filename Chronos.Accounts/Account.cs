/// <filename>
///     Account.cs
/// </filename>

// <auto-generated/>

using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace Chronos.Accounts
{
  public sealed class Account : ZES.Infrastructure.Domain.AggregateRoot
  {
    private readonly ConcurrentDictionary<Chronos.Core.Asset, double> _assets =
      new ConcurrentDictionary<Chronos.Core.Asset, double>();

    public Account()
    {
      Register<Chronos.Accounts.Events.AccountCreated>(ApplyEvent);
      Register<Chronos.Accounts.Events.AssetDeposited>(ApplyEvent);
      Register<Chronos.Accounts.Events.TransactionAdded>(ApplyEvent);
    }

    public Account(string name, AccountType type) : this()
    {
      When(new Chronos.Accounts.Events.AccountCreated(name, type));
    }

    public string Name 
    { 
      get;
      set; 
    }

    public AccountType Type
    {
      get;
      set;
    }

    public List<string> Assets => _assets.Keys.Select(k => k.AssetId).ToList();

    public void DepositAsset (Chronos.Core.Quantity quantity)
    {
      When(new Chronos.Accounts.Events.AssetDeposited(quantity));
    }  
    public void AddTransaction (string txId)
    {
      When(new Chronos.Accounts.Events.TransactionAdded(txId));
    }  
    private void ApplyEvent(Chronos.Accounts.Events.AccountCreated e)
    {
      Id = e.Name;
      Type = e.Type;
    }

    private void ApplyEvent(Chronos.Accounts.Events.AssetDeposited e)
    {
      _assets.AddOrUpdate(e.Quantity.Denominator, e.Quantity.Amount, (a, d) => d + e.Quantity.Amount);
    }
  	private void ApplyEvent (Chronos.Accounts.Events.TransactionAdded e)
    {
    }
  }
}